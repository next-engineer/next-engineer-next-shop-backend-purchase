name: deploy-purchase-to-ecs

on:
  push:
    branches: [ "main" ]

env:
  AWS_REGION: ap-northeast-2
  ECR_REPOSITORY: shop-repo
  ECS_CLUSTER: shop-cluster
  ECS_SERVICE: purchase-api-service
  CONTAINER_NAME: purchase

jobs:
  deploy:
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read

    steps:
      - uses: actions/checkout@v4

      - uses: aws-actions/configure-aws-credentials@v4
        with:
          # access key 사용 시
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build & Push
        run: |
          IMAGE_URI=${{ steps.login-ecr.outputs.registry }}/${ECR_REPOSITORY}:${GITHUB_SHA}
          docker build -t ${ECR_REPOSITORY}:${GITHUB_SHA} .
          docker tag ${ECR_REPOSITORY}:${GITHUB_SHA} ${IMAGE_URI}
          docker push ${IMAGE_URI}
          echo "IMAGE_URI=${IMAGE_URI}" >> $GITHUB_ENV

      - id: render
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: .github/ecs/task-definition.json
          container-name: ${{ env.CONTAINER_NAME }}
          image: ${{ env.IMAGE_URI }}

      - name: Deploy
        uses: aws-actions/amazon-ecs-deploy-task-definition@v2
        with:
          task-definition: ${{ steps.render.outputs.task-definition }}
          service: ${{ env.ECS_SERVICE }}
          cluster: ${{ env.ECS_CLUSTER }}
          wait-for-service-stability: true
