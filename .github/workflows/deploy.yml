name: deploy-purchase-to-ecs

on:
  push:
    branches: [ "main" ]
  workflow_dispatch:

env:
  AWS_REGION: ap-northeast-2
  ECR_REPOSITORY: shop-purchase-api-ecr
  ECS_CLUSTER: shop-ecs-purchase-cluster
  ECS_SERVICE: shop-ecs-purchase-task-service
  CONTAINER_NAME: purchase

jobs:
  deploy:
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read

    steps:
      - uses: actions/checkout@v4

      # --- 사전 진단: 시크릿/OIDC 토큰 확인 ---
      - name: Assert AWS_ROLE_TO_ASSUME is set
        run: |
          test -n "${{ secrets.AWS_ROLE_TO_ASSUME }}" || { echo "Missing secret: AWS_ROLE_TO_ASSUME"; exit 1; }
          echo "Secret is set (value hidden)"

      - name: Check OIDC availability
        run: |
          if [ -z "${ACTIONS_ID_TOKEN_REQUEST_URL}" ]; then
            echo "No OIDC token available. Add 'permissions: id-token: write'."; exit 1;
          fi
          echo "OIDC token endpoint detected"

      # --- OIDC로 AWS 자격 구성 (핵심: role-to-assume 추가) ---
      - name: Configure AWS credentials (OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Verify assumed identity
        run: |
          aws sts get-caller-identity
          acct=$(aws sts get-caller-identity --query Account --output text)
          [ "$acct" = "782683897698" ] || { echo "Assumed wrong account: $acct" && exit 1; }

      # --- ECR 로그인 & 빌드/푸시 ---
      - id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - uses: docker/setup-buildx-action@v3

      - name: Build & Push to ECR
        uses: docker/build-push-action@v6
        with:
          context: .
          platforms: linux/amd64
          push: true
          tags: |
            ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:${{ github.sha }}
            ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:latest

      # --- ECS 태스크 정의 렌더 & 배포 ---
      - name: Set image output
        id: image
        run: |
          echo "image=${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:${{ github.sha }}" >> "$GITHUB_OUTPUT"

      - name: Render task definition
        id: render
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: .github/ecs/task-definition.json
          container-name: ${{ env.CONTAINER_NAME }}
          image: ${{ steps.image.outputs.image }}

      - name: Deploy to ECS
        uses: aws-actions/amazon-ecs-deploy-task-definition@v2
        with:
          task-definition: ${{ steps.render.outputs.task-definition }}
          service: ${{ env.ECS_SERVICE }}
          cluster: ${{ env.ECS_CLUSTER }}
          wait-for-service-stability: true
